(k <- pamResult$nc)
pamResult <- pamResult$pamobject
# print cluster medoids
for (i in 1:k) {
cat(paste("cluster", i, ": "))
cat(colnames(pamResult$medoids)[which(pamResult$medoids[i,]==1)], "\n")
# print tweets in cluster i
# print(rdmTweets[pamResult$clustering==i])
}
# plot clustering result
layout(matrix(c(1,2),2,1)) # set to two graphs per page
plot(pamResult, col.p=pamResult$clustering, color=F, labels=4, lines=0, cex=.8, col.clus=1)
layout(matrix(1)) # change back to one graph per page
iris2 <- iris
iris2$Species <- NULL
(kmeans.result <- kmeans(iris2, 3))
table(iris$Species, kmeans.result$cluster)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans.result$cluster)
points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col = 1:3, pch = 8, cex=2)
library(fpc)
pamk.result <- pamk(iris2)
pamk.result$nc
table(pamk.result$pamobject$clustering, iris$Species)
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
layout(matrix(1))
library(cluster)
pam.result <- pam(iris2, 3)
table(pam.result$clustering, iris$Species)
layout(matrix(c(1,2),1,2))
plot(pam.result)
layout(matrix(1))
idx <- sample(1:dim(iris)[1], 40)
irisSample <- iris[idx,]
irisSample$Species <- NULL
hc <- hclust(dist(irisSample), method="ave")
plot(hc, hang=-1, labels=iris$Species[idx])
rect.hclust(hc, k=3)
groups <- cutree(hc, k=3)
iris2 <- iris[-5]
ds <- dbscan(iris2, eps=0, 42, MinPts = 5)
table(dm$cluster, iris$Species)
table(dd$cluster, iris$Species)
table(ds$cluster, iris$Species)
head(iris)
head(iris2)
ds <- dbscan(iris2, eps=0.42, MinPts = 5)
table(ds$cluster, iris$Species)
plot(ds, iris2)
plot(ds, iris2[c(1,4)])
plotcluster(iris2, ds$cluster)
set.seed(435)
idx <- sample(1:nrow(iris), 10)
newData <- iris[idx, -5]
newData <- newData + matrix(runif(10*4, min=0,2), nrow=10, ncol=4)
myPred <- predict(ds, iris2, newData)
plot(iris2[c(1,4)], col=1+ds$cluster)
points(newData[c(1,4)], pch="*", col=1+myPred, cex=3)
table(myPred, iris$Species[idx])
newData <- newData + matrix(runif(10*4, min=0.2), nrow=10, ncol=4)
myPred <- predict(ds, iris2, newData)
plot(iris2[c(1,4)], col=1+ds$cluster)
points(newData[c(1,4)], pch="*", col=1+myPred, cex=3)
table(myPred, iris$Species[idx])
newData <- newData + matrix(runif(10*4, min=0, max=0.2), nrow=10, ncol=4)
myPred <- predict(ds, iris2, newData)
plot(iris2[c(1,4)], col=1+ds$cluster)
points(newData[c(1,4)], pch="*", col=1+myPred, cex=3)
table(myPred, iris$Species[idx])
points(newData[,c(1,4)], pch="*", col=1+myPred, cex=3)
plot(iris2[c(1,4)], col=1+ds$cluster)
points(newData[,c(1,4)], pch="*", col=1+myPred, cex=3)
table(myPred, iris$Species[idx])
table(myPred, iris$Species[idx])
ds <- dbscan(iris2, eps=0.42, MinPts = 5)
myPred <- predict(ds, iris2, newData)
table(myPred, iris$Species[idx])
head(iris)
head(iris2)
iris2 <- iris
head(iris2)
iris2$Species <- NULL
head(iris2)
(kmeans.result <- kmeans(iris2, 3))
table(iris$Species, kmeans.result$cluster)
(kmeans.result <- kmeans(iris2, 3))
table(iris$Species, kmeans.result$cluster)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans.result$cluster)
points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col = 1:3, pch = 8, cex=2)
library(fpc)
pamk.result <- pamk(iris2)
pamk.result$nc
table(pamk.result$pamobject$clustering, iris$Species)
layout(matrix(c(1,2),1,2))
plot(pamk.result$pamobject)
layout(matrix(1))
library(cluster)
pam.result <- pam(iris2, 3)
table(pam.result$clustering, iris$Species)
layout(matrix(c(1,2),1,2))
plot(pam.result)
layout(matrix(1))
idx <- sample(1:dim(iris)[1], 40)
irisSample <- iris[idx,]
irisSample$Species <- NULL
hc <- hclust(dist(irisSample), method="ave")
plot(hc, hang=-1, labels=iris$Species[idx])
rect.hclust(hc, k=3)
groups <- cutree(hc, k=3)
library(fpc)
iris2 <- iris[-5]
ds <- dbscan(iris2, eps=0.42, MinPts = 5)
table(ds$cluster, iris$Species)
plot(ds, iris2)
plot(ds, iris2[c(1,4)])
plotcluster(iris2, ds$cluster)
set.seed(435)
idx <- sample(1:nrow(iris), 10)
newData <- iris[idx, -5]
newData <- newData + matrix(runif(10*4, min=0, max=0.2), nrow=10, ncol=4)
myPred <- predict(ds, iris2, newData)
plot(iris2[c(1,4)], col=1+ds$cluster)
points(newData[c(1,4)], pch="*", col=1+myPred, cex=3)
table(myPred, iris$Species[idx])
head(diamonds)
library(ggplot2)
head(diamonds)
install.packages("kernlab")
?specc
??specc
?specc
library(kernlab)
library(SamSPECTRAL)
library(kknn)
library(dbscan)
library(cluster)
iris.train <- as.matrix(iris[,1:4])
iris.model <- specc(iris.train, centers = 3)
(iris.con_mat.specc <- table(iris.model[1:150], iris$Species))
iris.Bays <- rbind(
iris.con_mat.specc[1,] / sum(iris.con_mat.specc[1,]),
iris.con_mat.specc[2,] / sum(iris.con_mat.specc[2,]),
iris.con_mat.specc[3,] / sum(iris.con_mat.specc[3,]))
iris.Bays
iris.model.km <- kmeans(iris[,1:4], 3, nstart=20)
(iris.con_mat.km <- table(iris.model.km$cluster, iris$Species))
clusplot(iris, iris.model.km$cluster, color=T, shade=T, labels=0, lines=0)
(iris.Bays.km <- rbind(
iris.con_mat.km[1,] / sum(iris.con_mat.km[1,]),
iris.con_mat.km[2,] / sum(iris.con_mat.km[2,]),
iris.con_mat.km[3,] / sum(iris.con_mat.km[3,]))
)
#use SamSPECTRAL clustering
iris.model.sam <- SamSPECTRAL(iris.train, dimensions=c(1,2,3), normal.sigma = 3, separation.factor = 1.2)
(iris.con_mat.sam <- table(iris.model.sam, iris$Species))
clusplot(iris, iris.model.sam, color=T, shade=T, labels=0, lines=0)
(iris.Bays.sam <- rbind(
iris.con_mat.sam[1,] / sum(iris.con_mat.sam[1,]),
iris.con_mat.sam[2,] / sum(iris.con_mat.sam[2,]),
iris.con_mat.sam[3,] / sum(iris.con_mat.sam[3,]))
)
#use bdscan clustering
#kNNdistplot(iris.train, 4) #get the eps for the dbscan model. Need the y value at the elbow on the plot
iris.model.db <- dbscan(iris.train, eps=.5, minPts = 4)
(iris.con_mat.db <- table(iris.model.db$cluster, iris$Species))
clusplot(iris, iris.model.db$cluster, color=T, shade=T, labels=0, lines=0)
(iris.Bays.db <- rbind(
iris.con_mat.db[1,] / sum(iris.con_mat.db[1,]),
iris.con_mat.db[2,] / sum(iris.con_mat.db[2,]),
iris.con_mat.db[3,] / sum(iris.con_mat.db[3,]))
)
#use kknn a nearest neighbors algorithm
iris.model.kknn <- specClust(iris.train, centers=3)
(iris.con_mat.kknn <- table(iris.model.kknn$cluster, iris$Species))
clusplot(iris, iris.model.kknn$cluster, color=T, shade=T, labels=0, lines=0)
(iris.Bays.kknn <- rbind(
iris.con_mat.kknn[1,] / sum(iris.con_mat.kknn[1,]),
iris.con_mat.kknn[2,] / sum(iris.con_mat.kknn[2,]),
iris.con_mat.kknn[3,] / sum(iris.con_mat.kknn[3,]))
iris.con_mat.kknn[1,] / sum(iris.con_mat.kknn[1,]),
iris.con_mat.kknn[2,] / sum(iris.con_mat.kknn[2,]),
iris.con_mat.kknn[3,] / sum(iris.con_mat.kknn[3,]))
)
iris.con_mat.kknn[1,] / sum(iris.con_mat.kknn[1,]),
iris.con_mat.kknn[2,] / sum(iris.con_mat.kknn[2,]),
iris.con_mat.kknn[3,] / sum(iris.con_mat.kknn[3,]))
)
(iris.Bays.kknn <- rbind(
iris.con_mat.kknn[1,] / sum(iris.con_mat.kknn[1,]),
iris.con_mat.kknn[2,] / sum(iris.con_mat.kknn[2,]),
iris.con_mat.kknn[3,] / sum(iris.con_mat.kknn[3,]))
)
iris.model.specc <- specc(iris.train, centers = 3)
(iris.con_mat.specc <- table(iris.model.specc[1:150], iris$Species))
(iris.Bays.specc <- rbind(
iris.con_mat.specc[1,] / sum(iris.con_mat.specc[1,]),
iris.con_mat.specc[2,] / sum(iris.con_mat.specc[2,]),
iris.con_mat.specc[3,] / sum(iris.con_mat.specc[3,]))
)
iris.model.specc
iris.Bays.specc
iris.model.km
iris.Bays.km
iris.model.sam
iris.Bays.sam
iris.model.db
iris.Bays.db
iris.model.kknn
iris.Bays.kknn
iris.con_mat.specc
iris.Bays.specc
iris.con_mat.km
iris.Bays.km
iris.con_mat.sam
iris.Bays.sam
iris.con_mat.db
iris.Bays.db
iris.con_mat.kknn
iris.Bays.kknn
?prob.table
prop.table
?prop.table
prop.table(iris.con_mat.specc, 1)
library(kernlab)
library(SamSPECTRAL)
library(kknn)
library(dbscan)
library(cluster)
setwd("~/Learning/Lipscomb MSDS/Data Mining/Final _Project")
digits.full <- read.csv('MNIST/train.csv')
digits.small <- digits.full[1:100,] #make the dataset smaller in order to run it on your laptop
digits.train <- as.matrix(digits.small[,2:785]) #remove the labels from the small dataset for model training
digits.model.specc <- specc(digits.train, centers = 10)
(digits.con_mat.specc <- table(digits.small$label, digits.model.specc[1:100]))
prob.table(digits.con_mat.specc, 1)
prop.table(digits.con_mat.specc, 1)
digits.model.km <- kmeans(digits.small[,2:785], 10, nstart=20)
(digits.con_mat.km <- table(digits.small$label, digits.model.km$cluster))
(digits.bays.km <- prop.table(digits.con_mat.km, 1))
digits.model.db <- dbscan(digits.train, eps=1700, minPts = 4)
(digits.con_mat.db <- table(digits.small$label, digits.model.db$cluster))
(digits.bays.db <- prop.table(digits.con_mat.db, 1))
digits.model.sam <- SamSPECTRAL(digits.train[1:100, ], dimensions=c(1,2,3, 4, 5, 6, 7, 8, 9, 10), normal.sigma = 5, separation.factor = 0.7)
(digits.con_mat.sam <- table(digits.small$label, digits.model.sam))
digits.model.kknn <- specClust(digits.small[,2:785], centers=10)
(iris.Bays.specc <- prop.table(iris.con_mat.specc, 1)
#use kmeans clustering
iris.model.km <- kmeans(iris[,1:4], 3, nstart=20)
(iris.con_mat.km <- table(iris.model.km$cluster, iris$Species))
clusplot(iris, iris.model.km$cluster, color=T, shade=T, labels=0, lines=0)
(iris.Bays.km <- rbind(
iris.con_mat.km[1,] / sum(iris.con_mat.km[1,]),
iris.con_mat.km[2,] / sum(iris.con_mat.km[2,]),
iris.con_mat.km[3,] / sum(iris.con_mat.km[3,]))
)
#use SamSPECTRAL clustering
iris.model.sam <- SamSPECTRAL(iris.train, dimensions=c(1,2,3), normal.sigma = 3, separation.factor = 1.2)
(iris.con_mat.sam <- table(iris.model.sam, iris$Species))
clusplot(iris, iris.model.sam, color=T, shade=T, labels=0, lines=0)
(iris.Bays.sam <- rbind(
iris.con_mat.sam[1,] / sum(iris.con_mat.sam[1,]),
iris.con_mat.sam[2,] / sum(iris.con_mat.sam[2,]),
iris.con_mat.sam[3,] / sum(iris.con_mat.sam[3,]))
)
#use bdscan clustering
#kNNdistplot(iris.train, 4) #get the eps for the dbscan model. Need the y value at the elbow on the plot
iris.model.db <- dbscan(iris.train, eps=.5, minPts = 4)
(iris.con_mat.db <- table(iris.model.db$cluster, iris$Species))
clusplot(iris, iris.model.db$cluster, color=T, shade=T, labels=0, lines=0)
(iris.Bays.db <- rbind(
iris.con_mat.db[1,] / sum(iris.con_mat.db[1,]),
iris.con_mat.db[2,] / sum(iris.con_mat.db[2,]),
iris.con_mat.db[3,] / sum(iris.con_mat.db[3,]))
)
#use kknn a nearest neighbors algorithm
iris.model.kknn <- specClust(iris.train, centers=3)
(iris.con_mat.kknn <- table(iris.model.kknn$cluster, iris$Species))
clusplot(iris, iris.model.kknn$cluster, color=T, shade=T, labels=0, lines=0)
(iris.Bays.kknn <- rbind(
iris.con_mat.kknn[1,] / sum(iris.con_mat.kknn[1,]),
iris.con_mat.kknn[2,] / sum(iris.con_mat.kknn[2,]),
iris.con_mat.kknn[3,] / sum(iris.con_mat.kknn[3,]))
)
iris.con_mat.specc
iris.Bays.specc
iris.con_mat.km
iris.Bays.km
iris.con_mat.sam
iris.Bays.sam
iris.con_mat.db
iris.Bays.db
iris.con_mat.kknn
iris.Bays.kknn
(iris.Bays.specc <- prop.table(iris.con_mat.specc, 1))
(iris.Bays.km <- rbind(
iris.con_mat.km[1,] / sum(iris.con_mat.km[1,]),
iris.con_mat.km[2,] / sum(iris.con_mat.km[2,]),
iris.con_mat.km[3,] / sum(iris.con_mat.km[3,]))
)
prop.table(iris.con_mat.km, 1)
library(kernlab)
library(SamSPECTRAL)
library(kknn)
library(dbscan)
library(cluster)
#use iris dataset. Convert into a matrix to run through specc
iris.train <- as.matrix(iris[,1:4])
#use spectral clustering
iris.model.specc <- specc(iris.train, centers = 3)
(iris.con_mat.specc <- table(iris.model.specc[1:150], iris$Species))
(iris.Bays.specc <- prop.table(iris.con_mat.specc, 1))
clusplot(iris, iris.model[1:150], color=T, shade=T, labels=0, lines=0)
#use kmeans clustering
iris.model.km <- kmeans(iris[,1:4], 3, nstart=20)
(iris.con_mat.km <- table(iris.model.km$cluster, iris$Species))
(iris.Bays.km <- prop.table(iris.con_mat.km, 1))
clusplot(iris, iris.model.km$cluster, color=T, shade=T, labels=0, lines=0)
#use SamSPECTRAL clustering
iris.model.sam <- SamSPECTRAL(iris.train, dimensions=c(1,2,3), normal.sigma = 3, separation.factor = 1.2)
(iris.con_mat.sam <- table(iris.model.sam, iris$Species))
(iris.Bays.sam <- prop.table(iris.con_mat.sam, 1))
clusplot(iris, iris.model.sam, color=T, shade=T, labels=0, lines=0)
#use bdscan clustering
#kNNdistplot(iris.train, 4) #get the eps for the dbscan model. Need the y value at the elbow on the plot
iris.model.db <- dbscan(iris.train, eps=.5, minPts = 4)
(iris.con_mat.db <- table(iris.model.db$cluster, iris$Species))
(iris.Bays.db <- prop.table(iris.con_mat.db, 1))
clusplot(iris, iris.model.db$cluster, color=T, shade=T, labels=0, lines=0)
#use kknn spectral algorithm
iris.model.kknn <- specClust(iris.train, centers=3)
(iris.con_mat.kknn <- table(iris.model.kknn$cluster, iris$Species))
(iris.Bays.kknn <- prop.table(iris.con_mat.kknn,1))
clusplot(iris, iris.model.kknn$cluster, color=T, shade=T, labels=0, lines=0)
iris.con_mat.specc
iris.Bays.specc
iris.con_mat.km
iris.Bays.km
iris.con_mat.sam
iris.Bays.sam
iris.con_mat.db
iris.Bays.db
iris.con_mat.kknn
iris.Bays.kknn
(digits.con_mat.sam <- table(digits.small$label, digits.model.sam))
digits.model.sam <- SamSPECTRAL(digits.train[1:100, ], dimensions=c(1,2,3, 4, 5, 6, 7, 8, 9, 10), normal.sigma = 5, separation.factor = 0.7)
(digits.con_mat.sam <- table(digits.small$label, digits.model.sam))
digits.model.sam <- SamSPECTRAL(digits.train[1:100, ], dimensions=c(1,2,3, 4, 5, 6, 7, 8, 9, 10), normal.sigma = 5, separation.factor = 0.7)
library(kernlab)
library(SamSPECTRAL)
library(kknn)
library(dbscan)
library(cluster)
setwd("~/Learning/Lipscomb MSDS/Data Mining/Final _Project")
#Read in data. Convert into a matrix to run through specc
digits.full <- read.csv('MNIST/train.csv')
digits.small <- digits.full[1:100,] #make the dataset smaller in order to run it on your laptop
digits.train <- as.matrix(digits.small[,2:785]) #remove the labels from the small dataset for model training
#use spectral clustering
digits.model.specc <- specc(digits.train, centers = 10)
(digits.con_mat.specc <- table(digits.small$label, digits.model.specc[1:100]))
(digits.bays.specc <- prop.table(digits.con_mat.specc, 1))
#use kmeans clustering
digits.model.km <- kmeans(digits.small[,2:785], 10, nstart=20)
(digits.con_mat.km <- table(digits.small$label, digits.model.km$cluster))
(digits.bays.km <- prop.table(digits.con_mat.km, 1))
#use bdscan clustering
kNNdistplot(digits.train, 10) #get the eps for the dbscan model. Need the y value at the elbow on the plot
digits.model.db <- dbscan(digits.train, eps=1700, minPts = 4)
(digits.con_mat.db <- table(digits.small$label, digits.model.db$cluster))
(digits.bays.db <- prop.table(digits.con_mat.db, 1))
#use SamSPECTRAL clustering - not working
digits.model.sam <- SamSPECTRAL(digits.train[1:100, ], dimensions=c(1,2,3, 4, 5, 6, 7, 8, 9, 10), normal.sigma = 5, separation.factor = 0.7)
(digits.con_mat.sam <- table(digits.small$label, digits.model.sam))
(digits.bays.sam <- prop.table(digits.con_mat.sam, 1))
#use kknn a nearest neighbors algorithm - not working
digits.model.kknn <- specClust(digits.small[,2:785], centers=10)
(digits.con_mat.kknn <- table(digits.small$label, digits.model.kknn$cluster))
(digits.bays.kknn <- prop.table(digits.con_mat.kknn, 1))
digits.con_mat.specc
digits.bays.specc
digits.con_mat.km
digits.bays.km
digits.con_mat.db
digits.bays.db
library(kernlab)
library(SamSPECTRAL)
library(kknn)
library(dbscan)
library(cluster)
setwd("~/Learning/Lipscomb MSDS/Data Mining/Final _Project")
#Read in data. Convert into a matrix to run through specc
digits.full <- read.csv('MNIST/train.csv')
digits.small <- digits.full[1:100,] #make the dataset smaller in order to run it on your laptop
digits.train <- as.matrix(digits.small[,2:785]) #remove the labels from the small dataset for model training
#use spectral clustering
digits.model.specc <- specc(digits.train, centers = 10)
(digits.con_mat.specc <- table(digits.small$label, digits.model.specc[1:100]))
(digits.bays.specc <- prop.table(digits.con_mat.specc, 1))
#use kmeans clustering
digits.model.km <- kmeans(digits.small[,2:785], 10, nstart=20)
(digits.con_mat.km <- table(digits.small$label, digits.model.km$cluster))
(digits.bays.km <- prop.table(digits.con_mat.km, 1))
#use bdscan clustering
kNNdistplot(digits.train, 10) #get the eps for the dbscan model. Need the y value at the elbow on the plot
digits.model.db <- dbscan(digits.train, eps=1700, minPts = 4)
(digits.con_mat.db <- table(digits.small$label, digits.model.db$cluster))
(digits.bays.db <- prop.table(digits.con_mat.db, 1))
#use SamSPECTRAL clustering - not working
digits.model.sam <- SamSPECTRAL(digits.train[1:100, ], dimensions=c(1,2,3, 4, 5, 6, 7, 8, 9, 10), normal.sigma = 5, separation.factor = 0.7)
(digits.con_mat.sam <- table(digits.small$label, digits.model.sam))
(digits.bays.sam <- prop.table(digits.con_mat.sam, 1))
#use kknn a nearest neighbors algorithm - not working
digits.model.kknn <- specClust(digits.small[,2:785], centers=10)
(digits.con_mat.kknn <- table(digits.small$label, digits.model.kknn$cluster))
(digits.bays.kknn <- prop.table(digits.con_mat.kknn, 1))
digits.con_mat.specc
digits.bays.specc
digits.con_mat.km
digits.bays.km
digits.con_mat.db
digits.bays.db
library(kernlab)
library(SamSPECTRAL)
library(kknn)
library(dbscan)
library(cluster)
setwd("~/Learning/Lipscomb MSDS/Data Mining/Final _Project")
#Read in data. Convert into a matrix to run through specc
digits.full <- read.csv('MNIST/train.csv')
digits.small <- digits.full[1:100,] #make the dataset smaller in order to run it on your laptop
digits.train <- as.matrix(digits.small[,2:785]) #remove the labels from the small dataset for model training
#use spectral clustering
digits.model.specc <- specc(digits.train, centers = 10)
(digits.con_mat.specc <- table(digits.small$label, digits.model.specc[1:100]))
(digits.bays.specc <- prop.table(digits.con_mat.specc, 1))
#use kmeans clustering
digits.model.km <- kmeans(digits.small[,2:785], 10, nstart=20)
(digits.con_mat.km <- table(digits.small$label, digits.model.km$cluster))
(digits.bays.km <- prop.table(digits.con_mat.km, 1))
#use bdscan clustering
kNNdistplot(digits.train, 10) #get the eps for the dbscan model. Need the y value at the elbow on the plot
digits.model.db <- dbscan(digits.train, eps=1700, minPts = 4)
(digits.con_mat.db <- table(digits.small$label, digits.model.db$cluster))
(digits.bays.db <- prop.table(digits.con_mat.db, 1))
#use SamSPECTRAL clustering - not working
digits.model.sam <- SamSPECTRAL(digits.train[1:100, ], dimensions=c(1,2,3, 4, 5, 6, 7, 8, 9, 10), normal.sigma = 5, separation.factor = 0.7)
(digits.con_mat.sam <- table(digits.small$label, digits.model.sam))
(digits.bays.sam <- prop.table(digits.con_mat.sam, 1))
#use kknn a nearest neighbors algorithm - not working
digits.model.kknn <- specClust(digits.small[,2:785], centers=10)
(digits.con_mat.kknn <- table(digits.small$label, digits.model.kknn$cluster))
(digits.bays.kknn <- prop.table(digits.con_mat.kknn, 1))
digits.con_mat.specc
digits.bays.specc
digits.con_mat.km
digits.bays.km
digits.con_mat.db
digits.bays.db
library(kernlab)
library(SamSPECTRAL)
library(kknn)
library(dbscan)
library(cluster)
#use iris dataset. Convert into a matrix to run through specc
iris.train <- as.matrix(iris[,1:4])
#use spectral clustering
iris.model.specc <- specc(iris.train, centers = 3)
(iris.con_mat.specc <- table(iris.model.specc[1:150], iris$Species))
(iris.Bays.specc <- prop.table(iris.con_mat.specc, 1))
clusplot(iris, iris.model.specc[1:150], color=T, shade=T, labels=0, lines=0)
#use kmeans clustering
iris.model.km <- kmeans(iris[,1:4], 3, nstart=20)
(iris.con_mat.km <- table(iris.model.km$cluster, iris$Species))
(iris.Bays.km <- prop.table(iris.con_mat.km, 1))
clusplot(iris, iris.model.km$cluster, color=T, shade=T, labels=0, lines=0)
#use SamSPECTRAL clustering
iris.model.sam <- SamSPECTRAL(iris.train, dimensions=c(1,2,3), normal.sigma = 3, separation.factor = 1.2)
(iris.con_mat.sam <- table(iris.model.sam, iris$Species))
(iris.Bays.sam <- prop.table(iris.con_mat.sam, 1))
clusplot(iris, iris.model.sam, color=T, shade=T, labels=0, lines=0)
#use bdscan clustering
#kNNdistplot(iris.train, 4) #get the eps for the dbscan model. Need the y value at the elbow on the plot
iris.model.db <- dbscan(iris.train, eps=.5, minPts = 4)
(iris.con_mat.db <- table(iris.model.db$cluster, iris$Species))
(iris.Bays.db <- prop.table(iris.con_mat.db, 1))
clusplot(iris, iris.model.db$cluster, color=T, shade=T, labels=0, lines=0)
#use kknn spectral algorithm
iris.model.kknn <- specClust(iris.train, centers=3)
(iris.con_mat.kknn <- table(iris.model.kknn$cluster, iris$Species))
(iris.Bays.kknn <- prop.table(iris.con_mat.kknn,1))
clusplot(iris, iris.model.kknn$cluster, color=T, shade=T, labels=0, lines=0)
iris.con_mat.specc
iris.Bays.specc
iris.con_mat.km
iris.Bays.km
iris.con_mat.sam
iris.Bays.sam
iris.con_mat.db
iris.Bays.db
iris.con_mat.kknn
iris.Bays.kknn
digits.model.specc <- specc(digits.train, centers = 10)
(digits.con_mat.specc <- table(digits.small$label, digits.model.specc[1:100]))
(digits.bays.specc <- prop.table(digits.con_mat.specc, 1))
kNNdistplot(digits.train, 10) #get the eps for the dbscan model. Need the y value at the elbow on the plot
digits.model.db <- dbscan(digits.train, eps=1700, minPts = 4)
(digits.con_mat.db <- table(digits.small$label, digits.model.db$cluster))
(digits.bays.db <- prop.table(digits.con_mat.db, 1))
digits.model.km <- kmeans(digits.small[,2:785], 10, nstart=20)
(digits.con_mat.km <- table(digits.small$label, digits.model.km$cluster))
(digits.bays.km <- prop.table(digits.con_mat.km, 1))
plot(digits.bays.km)
